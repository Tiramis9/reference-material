shell里面各种定义的意思
$$
Shell本身的PID（ProcessID）
$!
Shell最后运行的后台Process的PID
$?
最后运行的命令的结束代码（返回值）
$-
使用Set命令设定的Flag一览
$*
所有参数列表。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$@
所有参数列表。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$#
添加到Shell的参数个数
$0
Shell本身的文件名
$1～$n
添加到Shell的各参数值。$1是第1参数、$2是第2参数…。

关系运算符
-eq 检测两个数是否相等 是返回true
-ne 检测两个数是否相等，不相等返回true
-gt 检测左边的数是否大于右边的数，是，返回true
-lt 检测左边的数是否小于右边的数，是，返回true
-ge 检测左边的数是否大等于右边的，是，返回true
-le 检测左边的数是否大等于右边的，是，返回true

布尔运算符列表
！非运算
-o 或运算
-a 与运算

字符串运算符列表
= 检测两个字符串是否相等
！=检测两个字符串是否相等
-z 检测字符串长度是否为0，为0返回true
-n 检测字符串长度是否为0，不为0返回true
str 检测字符串是否为空，不为空返回true

文件测试运算符列表
-b 检测文件是否是块设备文件
-c 检测文件是否是字符设备
-d 检测文件是否是目录
-f 检测文件是否是普通文件
-g 检测文件是否设置了SGID位
-k 检测文件是否设置了粘着位
-p 检测文件是否是具名管道
-u 检测文件是否设置了SUID
-r 检测文件是否可读
-w 检测文件是否可写
-x 检测文件是否可执行
-s 检测文件是否为空
-e 检测文件是否存在

特殊变量列表
$0 ：当前脚本的的文件名
$n  : 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。
$# ： 传递给脚本或函数的参数个数
$* ： 传递给脚本或函数的所有参数
$@ ： 传递给脚本或函数的所有参数。被双引号(" ")包含时
$? ： 上个命令退出的状态，或函数的返回值
$$ ： 当前shell进程的PID


shell中的read可以读取命令行输入就像stdin

查看某个网络区段是否连接正常
#!/bin/sh
ip=1 #通过修改初值 
while [ $ip != "254" ]; 
do
#yes正常，no主机不存在或不正常 
ping 192.168.0.$ip -c 2 | grep -q "ttl=" && echo "192.168.0.$ip yes" || echo "192.168.0.$ip no" 
ip=`expr "$ip" + "1"`
done




部字段分隔符IFS
内部字段分隔符(Internal Field Separator, IFS)是shell脚本中的一个特殊变量，在处理文本数据很有用

#!/bin/bash

data="111,222,333,444,555,666"

oldIFS=$IFS  #定义一个变量为默认IFS
IFS=,        #设置IFS为逗号

for i in $data
do
 echo S:$i
done

IFS=$oldIFS  #还原IFS为默认值

tr命令



tr可以使用的字符类：
[:alnum:]：字母和数字
[:alpha:]：字母 
[:cntrl:]：控制（非打印）字符 
[:digit:]：数字
[:graph:]：图形字符
[:lower:]：小写字母
[:print:]：可打印字符
[:punct:]：标点符号 
[:space:]：空白字符 
[:upper:]：大写字母 
[:xdigit:]：十六进制字符

切分文件名提取文件扩展名或提取文件名
从右向左匹配 ：% 和 %% 操作符的示例
#!/bin/bash
#提取文件名，删除后缀。

file_name="text.gif"
name=${file_name%.*}
echo file name is: $name

输出结果：
file name is: test

# ${VAR%.* }含义：从$VAR中删除位于 % 右侧的通配符左右匹配的字符串，通配符从右向左进行匹配。现在给变量 name 赋值，name=text.gif，那么通配符从右向左就会匹配到 .gif，所有从 $VAR 中删除匹配结果。
# % 属于非贪婪操作符，他是从左右向左匹配最短结果；%% 属于贪婪操作符，会从右向左匹配符合条件的最长字符串。

从左向右匹配：# 和 ## 操作符示例
#!/bin/bash
#提取后缀，删除文件名。

file_name="text.gif"
suffix=${file_name#*.}
echo suffix is: $suffix

输出结果：
suffix is: gif

# ${VAR#*.} 含义：从 $VAR 中删除位于 # 右侧的通配符所匹配的字符串，通配符是左向右进行匹配。
# 跟 % 一样，# 也有贪婪操作符 ## 。

file_name="text.gif.bak.2012.txt"
suffix=${file_name#*.}
suffix2=${file_name##*.}
echo suffix is: $suffix
echo suffix is: $suffix2

输出结果：
suffix is: text.gif.bak.2012     //使用 #
suffix2 is: txt                  //使用 ##

操作符 ## 使用 *. 从左向右贪婪匹配到 text.gif.bak.2012

