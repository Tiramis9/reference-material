现在用到gdb一般是在服务器出现问题的时候这个问题指的是包括
内存的分配问题或者是程序出现的问题，可以用这个gdb快速的定位错误的代码的位置

例如:
对于我现在的开发中一般不会给你代码然后去GDB让你调试一般都是一些动态库一个完整的游戏的服务器

例如这个图片中的
前面蓝色的是一个个游戏的实例，后面绿色的是开启游戏的脚本，和我要说的无关

每一个游戏的实例差不多这个样子

都是有包含4个目录，其中一个log是一个软链接
bin目录下存放的是一些框架的动态库和一些启动的脚本，外面的启动脚本会调用这里面的
etc目录存放的是一些配置文件
log存在的是一些日志的文件
so存放的是一些游戏，机器人，算法的动态库

下面用GDB调试定位程序的问题
先进入到bin目录

进入到bin目录可以看到有很多core文件，这个是因为开启了GDB的生成core文件的选项在编译动态库的时候
然后有个GameFrame.run这个是框架的动态库，后面是启动的脚本
首先可以用gdb加载core文件去看这个程序出毛病的地方

一定要先加载GameFrame.run然后再加载core文件，这样才能看到问题出在哪里

这是加载core文件出错的地方，现在知道出错的地方可以gdb加载框架动态库去运行，然后定位到出错的代码的位子

直接加载框架动态库
程序的运行从他开始的

设置参数，这个参数都是不一样的，我这里设置这个参数是为了跳过一些代码，好让程序直接从游戏的代码开始运行

直接在哪个出问题的地方打断点
然后去一行行的运行，基本就能找到错误的地方在哪里